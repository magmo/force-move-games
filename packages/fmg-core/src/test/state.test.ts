import BN from 'bn.js';
import { Channel } from '../channel';
import { State } from '../state';
import expectRevert from './helpers/expect-revert';
import { CountingGame } from '../test-game/counting-game';
import { sign } from '../utils';
import linker from 'solc/linker';

import { ethers, ContractFactory, Wallet, Contract } from 'ethers';

// @ts-ignore
import StateArtifact from '../../build/contracts/State.json';
import TestStateArtifact from '../../build/contracts/TestState.json';

const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');
const privateKey = '0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d';
const wallet = new Wallet(privateKey, provider);

describe('State', () => {

  let stateLib;
  let testStateLib;
  const channelNonce = 12;
  const turnNum = 15;

  const channelType = new Wallet('4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d')
    .address;
  // private keys are from the accounts generated by `ganache-cli -d`
  const participantA = new Wallet(
    '6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1',
  );
  const participantB = new Wallet(
    '6370fd033278c143179d81c5526140625662b8daa446c22ee2d73db3707e620c',
  );
  const participants = [participantA.address, participantB.address];
  const resolution = [new BN(5), new BN(4)];
  const channel = new Channel(channelType, channelNonce, participants);
  const stateType = State.StateType.PreFundSetup;
  const state = new State({
    channel,
    stateType,
    turnNum,
    resolution,
    stateCount: 0,
  });

  beforeEach(async () => {
    const networkId = (await provider.getNetwork()).chainId;

    const factory = ContractFactory.fromSolidity(StateArtifact, wallet);
    stateLib = await factory.attach(StateArtifact.networks[networkId].address);

    TestStateArtifact.bytecode = linker.linkBytecode(TestStateArtifact.bytecode, { "State": StateArtifact.networks[networkId].address });
    testStateLib = await ContractFactory.fromSolidity(TestStateArtifact, wallet).deploy();
  });

  it('identifies stateTypes', async () => {
    state.stateType = State.StateType.PreFundSetup;
    expect(await testStateLib.isPreFundSetup(state.args)).toBe(true);

    state.stateType = State.StateType.PostFundSetup;
    expect(await testStateLib.isPostFundSetup(state.args)).toBe(true);

    state.stateType = State.StateType.Game;
    expect(await testStateLib.isGame(state.args)).toBe(true);

    state.stateType = State.StateType.Conclude;
    expect(await testStateLib.isConclude(state.args)).toBe(true);
  });

  it('identifies the mover based on the turnNum', async () => {
    const mover = await testStateLib.mover(state.args);
    // our state nonce is 15, which is odd, so it should be participant[1]
    expect(mover).toEqual(participants[1]);
  });

  it('can calculate the channelId', async () => {
    const chainId = await testStateLib.channelId(state.args);
    const localId = channel.id;

    expect(chainId).toEqual(localId);
  });

  it('can check if a state is signed', async () => {
    // needs to be signed by 1 as it's their move
    const { r, s, v } = sign(state.toHex(), participantB.privateKey);

    expect(await testStateLib.requireSignature(state.args, v, r, s)).toBeTruthy();
  });

  it('will revert if the wrong party signed', async () => {
    // needs to be signed by 1 as it's their move
    const { v, r, s } = sign(state.toHex(), participantA.privateKey);
    expectRevert(testStateLib.requireSignature(state.args, v, r, s));
  });

  it('can check if the state is fully signed', async () => {
    const { r: r0, s: s0, v: v0 } = sign(state.toHex(), participantA.privateKey);
    const { r: r1, s: s1, v: v1 } = sign(state.toHex(), participantB.privateKey);

    expect(
      await testStateLib.requireFullySigned(state.args, [v0, v1], [r0, r1], [s0, s1]),
    ).toBeTruthy();
  });

  it('can test if the gameAttributes are equal', async () => {
    const state1 = CountingGame.preFundSetupState({ channel, resolution, turnNum, gameCounter: 0 });
    const state2 = CountingGame.preFundSetupState({ channel, resolution, turnNum, gameCounter: 1 });

    await expectRevert(stateLib.gameAttributesEqual(state1.args, state2.args));
  });
});
